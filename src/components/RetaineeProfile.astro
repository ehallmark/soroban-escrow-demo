---
import RetainorList from "./RetainorList.astro";
---

<div class="retainee-profile">
    <h2>My Retainee Profile</h2>
    <div class="form-group">
        <label for="retainee-info-name">Name:</label>
        <input type="text" id="retainee-info-name" />
    </div>
    <div class="form-group">
        <label for="retainee-info-retainors">Retainors (comma delimited):</label
        >
        <textarea id="retainee-info-retainors"></textarea>
    </div>
    <button id="retainee-info-btn">Create</button>
    <RetainorList />
</div>

<script>
    import { wallet, retainors, retaineeName } from "../stores/contractStore";
    import retainer from "../contracts/retainer";
    import { signAndSendWithModal } from "../contracts/transactions";

    const onWalletValue = async (value: string) => {
        try {
            const { result } = await retainer.retainee_info({
                retainee: value,
            });
            console.log(result);
            if (result && result.hasOwnProperty("retainors")) {
                retainors.set(result.retainors);
                retaineeName.set(result.name);
            }
        } catch (e) {
            console.error(e);
        }
    };
    const newRetaineeButton = document.getElementById(
        "retainee-info-btn",
    ) as HTMLButtonElement;
    const retaineeNameInput = document.getElementById(
        "retainee-info-name",
    ) as HTMLInputElement;
    const retaineeRetainorsInput = document.getElementById(
        "retainee-info-retainors",
    ) as HTMLInputElement;

    retaineeName.subscribe((value) => {
        if (value === "") {
            newRetaineeButton.innerHTML = "Create";
        } else {
            newRetaineeButton.innerHTML = "Update";
        }
        retaineeNameInput.value = value;
    });

    retainors.subscribe((value) => {
        retaineeRetainorsInput.value = value.join(",");
    });

    // listen for button click
    newRetaineeButton.addEventListener("click", async () => {
        if (!retaineeNameInput.value || wallet.get() === "") {
            return;
        }
        let _retainors: string[] = [];
        retaineeRetainorsInput.value.split(",").forEach((r) => {
            if (r.trim() !== "") {
                _retainors.push(r.trim());
            }
        });
        const tx = await retainer.set_retainee_info({
            retainee: wallet.get(),
            name: retaineeNameInput.value,
            retainors: _retainors,
        });

        signAndSendWithModal(tx, document, () =>
            onWalletValue(wallet.get()).then(() => {
                console.log("onWalletValue");
            }),
            ()=>{}
        );        
    });
</script>

<style>
    * {
        box-sizing: border-box;
    }
    h2 {
        margin-top: 0;
    }
    .retainee-profile {
        max-width: 600px;
        margin: auto;
        padding: 2rem;
        border-radius: 8px;
        border: 1px solid rgba(var(--accent-light), 25%);
        background: linear-gradient(
            rgba(var(--accent-dark), 66%),
            rgba(var(--accent-dark), 33%)
        );
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }
</style>
