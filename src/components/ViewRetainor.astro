---
import { urlForAccountAddress } from "../contracts/util";
const address = Astro.props.address.trim();
console.log(`address: ${address}`);
---

<p class="instructions">
    <strong>Retainer Info</strong><br />
    <span id="retainor-id" style="display: none;">{address}</span>
    <span>Name: <span id="retainor-name"></span></span><br />
    <span>
        Address: <a href={urlForAccountAddress(address)}
            >{address.substring(0, 8)}...</a
        >
    </span>
    <br />
    <span>
        Amount in retainer: <span id="retainer-amount"></span><span
            id="retainer-token"
            style="margin-left: 5px;"></span>
    </span>
</p>
<p id="submit-bill-form" class="instructions">
    <label for="submit-bill-amount">XLM Amount</label>
    <input type="number" id="submit-bill-amount" /><br />
    <label for="submit-bill-notes">Notes</label>
    <textarea id="submit-bill-notes"></textarea>
    <br />
    <button id="submit-bill">Submit Bill</button>
</p>
<p class="instructions" id="pending-bill"></p>
<p class="instructions" id="bill-history"></p>
<script>
    import { wallet } from "../stores/contractStore";
    import retainer from "../contracts/retainer";
    import type { ApprovalStatus } from "../../packages/retainer/dist";
    import {
        SYMBOL_TOKENS,
        TOKEN_SYMBOLS,
        networkPassphrase,
    } from "../contracts/util";

    const getAddress = () => {
        return (
            (document.getElementById("retainor-id") as HTMLSpanElement)
                .textContent || ""
        ).trim();
    };

    const updateBillHistory = async (publicKey: string, address: string) => {
        let billHistoryElem = document.getElementById(
            "bill-history",
        ) as HTMLParagraphElement;
        let { result } = await retainer.view_receipt_history({
            retainee: publicKey,
            retainor: address,
            limit: 0,
        });
        if (!result || result.length == 0) {
            billHistoryElem.innerHTML =
                "<strong>Bill History</strong><br/><br/><span>No bill history.</span>";
            return;
        }
        let data: string = result
            .map((r) => {
                return `<tr>
            <td>${r.date}</td>
            <td>${r.bill.amount}</td>
            <td>${TOKEN_SYMBOLS[networkPassphrase][r.bill.token]}</td>
            <td>${r.notes}</td>
            <td>${r.status.tag}</td>
        </tr>`;
            })
            .join("");
        billHistoryElem.innerHTML = `<strong>Bill History</strong><br /><table>
    <thead>
        <tr>
            <th>Date</th>
            <th>Amount</th>
            <th>Token</th>
            <th>Notes</th>
            <th>Status</th>
        </tr>
    </thead>
    <tbody>
        ${data}
    </tbody>
</table>`;
    };

    const updatePendingBill = async (publicKey: string, address: string) => {
        let pendingBillElem = document.getElementById(
            "pending-bill",
        ) as HTMLParagraphElement;
        let submitBillForm = document.getElementById(
            "submit-bill-form",
        ) as HTMLParagraphElement;
        try {
            let { result } = await retainer.view_bill_unwrap({
                retainee: publicKey,
                retainor: address,
            });
            if (!result) {
                submitBillForm.style.display = "block";
                pendingBillElem.innerHTML =
                    "<strong>Pending Payment</strong><br/><br/><span>No pending payment.</span>";

                return;
            }
            submitBillForm.style.display = "none";
            pendingBillElem.innerHTML = `<strong>Pending Payment</strong><br /><table>
    <thead>
        <tr>
            <th>Manage</th>
            <th>Date</th>
            <th>Amount</th>
            <th>Token</th>
            <th>Notes</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td><button id="withdraw">Withdraw</button>
            <td>${result.date}</td>
            <td>${result.amount}</td>
            <td>${TOKEN_SYMBOLS[networkPassphrase][result.token]}</td>
            <td>${result.notes}</td>
        </tr>
    </tbody>
</table>`;

            let withdraw = document.getElementById(
                "withdraw",
            ) as HTMLButtonElement;
            withdraw.addEventListener("click", async () => {
                let tx = await retainer.unsubmit_bill({
                    retainee: publicKey,
                    retainor: address,
                });
                const { result } = await tx.signAndSend();
                console.log(result);
                updatePendingBill(publicKey, address).then(() => {
                    console.log("Updated pending bill");
                });
                updateBillHistory(publicKey, address).then(() => {
                    console.log("Updated bill history");
                });
            });
        } catch (e) {
            console.log("no pending bill");
            pendingBillElem.innerHTML =
                "<strong>Pending Payment</strong><br/><br/><span>No pending payment.</span>";
            submitBillForm.style.display = "block";
        }
    };

    const updateRetainerAmount = async (publicKey: string, address: string) => {
        let retainerInfo;
        let retainerAmount = document.getElementById(
            "retainer-amount",
        ) as HTMLSpanElement;
        try {
            retainerInfo = await retainer.retainer_balance_unwrap({
                retainor: publicKey,
                retainee: address,
            });
            let retainerToken = document.getElementById(
                "retainer-token",
            ) as HTMLSpanElement;
            retainerAmount.textContent = retainerInfo.result.amount.toString();
            retainerToken.textContent =
                TOKEN_SYMBOLS[networkPassphrase][retainerInfo.result.token];
        } catch (e) {
            console.log("No retainer found");
            retainerInfo = {
                amount: "",
                token: "",
            };
            retainerAmount.textContent = "0";
        }
        console.log(retainerInfo);
    };
    `<label for="submit-bill-amount">XLM Amount</label>
    <input type="number" id="submit-bill-amount" /><br />
    <label for="submit-bill-notes">Notes</label>
    <textarea id="submit-bill-notes"></textarea>
    <br />
    <button id="submit-bill">Submit Bill</button>`;

    let submitButton = document.getElementById(
        "submit-bill",
    ) as HTMLButtonElement;
    let amountInput = document.getElementById(
        "submit-bill-amount",
    ) as HTMLInputElement;
    let notesInput = document.getElementById(
        "submit-bill-notes",
    ) as HTMLTextAreaElement;
    submitButton.addEventListener("click", async () => {
        let amount = amountInput.value;
        if (!amount) {
            alert("Please input a valid amount");
            return;
        }
        let retainerAmount = document
            .getElementById("retainer-amount")
            ?.innerText.trim();
        if (parseInt(amount, 10) > parseInt(retainerAmount, 10)) {
            alert("Not enough in retainer.");
            return;
        }
        let publicKey = wallet.get();
        if (publicKey === "") {
            alert("Public key not found");
            return;
        }
        let address = getAddress();
        let args = {
            retainor: publicKey,
            retainee: address,
            token: SYMBOL_TOKENS[networkPassphrase]["XLM"],
            amount: BigInt(amount),
            date: new Date().toDateString(),
            notes: notesInput.value ?? "",
        };
        console.log(args);
        let tx = await retainer.submit_bill(args);
        console.log(tx);
        const { result } = await tx.signAndSend();
        console.log(result);
        await updatePendingBill(publicKey, address);
    });

    wallet.subscribe(async (publicKey: string) => {
        console.log(`publicKey: ${publicKey}`);
        if (publicKey === "") {
            return;
        }
        let address: string = getAddress();
        if (address === "") {
            console.error("No address found");
            return;
        }

        retainer
            .retainor_info({
                retainor: address,
            })
            .then(({ result }) => {
                console.log("retainor info result");
                console.log(result);
                if (result && result.hasOwnProperty("name")) {
                    let nameElem = document.getElementById(
                        "retainor-name",
                    ) as HTMLSpanElement;
                    nameElem.textContent = result.name;
                }
            })
            .catch(() => {
                console.log("No retainor name found");
            });

        updatePendingBill(publicKey, address).then(() => {
            console.log("Pending bill updated");
        });
        updateBillHistory(publicKey, address).then(() => {
            console.log("Bill history updated");
        });
        console.log(`publicKey: ${publicKey}`);
        console.log(`address: ${address}`);
        await updateRetainerAmount(publicKey, address);
    });
</script>

<style>
    main {
        margin: auto;
        padding: 1rem;
        width: 800px;
        max-width: calc(100% - 2rem);
        color: white;
        font-size: 20px;
        line-height: 1.6;
    }
    .astro-a {
        position: absolute;
        top: -32px;
        left: 50%;
        transform: translatex(-50%);
        width: 220px;
        height: auto;
        z-index: -1;
    }
    h1 {
        font-size: 4rem;
        font-weight: 700;
        line-height: 1;
        text-align: center;
        margin-bottom: 1em;
    }
    .text-gradient {
        background-image: var(--accent-gradient);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-size: 400%;
        background-position: 0%;
    }
    .instructions {
        margin-bottom: 2rem;
        border: 1px solid rgba(var(--accent-light), 25%);
        background: linear-gradient(
            rgba(var(--accent-dark), 66%),
            rgba(var(--accent-dark), 33%)
        );
        padding: 1.5rem;
        border-radius: 8px;
    }
    .instructions code {
        font-size: 0.8em;
        font-weight: bold;
        background: rgba(var(--accent-light), 12%);
        color: rgb(var(--accent-light));
        border-radius: 4px;
        padding: 0.3em 0.4em;
    }
    .instructions strong {
        color: rgb(var(--accent-light));
    }
    .instructions button {
        display: inline-block;
        width: 40%;
        margin-left: 4%;
        margin-right: 4%;
        place-items: center;
        justify-items: center;
        align-items: center;
    }
</style>
