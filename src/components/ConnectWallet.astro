<div id="connect-wrap" class="wrap" aria-live="polite">
  <div class="ellipsis"></div>
  <button style="display:none" data-connect aria-controls="connect-wrap">
    Connect
  </button>
  <button style="display:none" data-disconnect aria-controls="connect-wrap">
    Disconnect
  </button>
</div>

<style>
  .wrap {
    text-align: center;
    display: flex;
    flex-direction: column;
    width: 100%;
    max-width: 18em;
    margin: auto;
    justify-content: center;
    line-height: 2.7rem;
    gap: 0.5rem;
    margin-bottom: 1.5rem;
  }

  .ellipsis {
    overflow: hidden;
    text-overflow: ellipsis;
    text-align: center;
    white-space: nowrap;
    margin-bottom: 0.5rem;
    word-wrap: break-word;
    overflow-wrap: break-word;
  }

  button {
    padding: 0.75rem;
    background: #007bff;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-size: 1rem;
    transition: background 0.3s ease;
    width: 100%;
  }

  button:hover {
    background: #0056b3;
  }

  @media (max-width: 768px) {
    .wrap {
      width: 80%;
      margin: auto;
      padding: 1rem;
    }

    button {
      width: 100%;
      margin: 0.5rem 0;
    }
  }
</style>

<script>
  import { getPublicKey, connect, disconnect } from "../stellar-wallets-kit";
  import {
    wallet,
    retainees,
    retainors,
    retaineeName,
    retainorName,
  } from "../stores/contractStore";
  import { signTransaction } from "../stellar-wallets-kit";
  import retainer from "../contracts/retainer";

  const ellipsis = document.querySelector(
    "#connect-wrap .ellipsis",
  ) as HTMLElement;
  const connectButton = document.querySelector(
    "[data-connect]",
  ) as HTMLButtonElement;
  const disconnectButton = document.querySelector(
    "[data-disconnect]",
  ) as HTMLButtonElement;

  async function showDisconnected() {
    ellipsis.innerHTML = "";
    ellipsis.removeAttribute("title");
    connectButton.style.removeProperty("display");
    disconnectButton.style.display = "none";
    wallet.set("");
  }

  async function showConnected() {
    const publicKey = await getPublicKey();
    if (publicKey) {
      ellipsis.innerHTML = `Signed in as ${publicKey}`;
      ellipsis.title = publicKey ?? "";
      connectButton.style.display = "none";
      disconnectButton.style.removeProperty("display");
      wallet.set(publicKey);
    } else {
      showDisconnected();
    }
  }

  connectButton.addEventListener("click", async () => {
    await connect(showConnected);
  });

  disconnectButton.addEventListener("click", async () => {
    disconnect(showDisconnected);
  });

  try {
    if (await getPublicKey()) {
      showConnected();
    } else {
      showDisconnected();
    }
  } catch (e) {
    console.error(e);
    showDisconnected();
  }

  const setRetainees = async (value: string) => {
    try {
      const { result } = await retainer.retainor_info({
        retainor: value,
      });
      console.log(result);
      if (result && result.hasOwnProperty("retainees")) {
        retainees.set(result.retainees);
        retainorName.set(result.name);
      }
    } catch (e) {
      console.log("no retainees found");
    }
  };
  const setRetainors = async (value: string) => {
    try {
      const { result } = await retainer.retainee_info({
        retainee: value,
      });
      console.log(result);
      if (result && result.hasOwnProperty("retainors")) {
        retainors.set(result.retainors);
        retaineeName.set(result.name);
      }
    } catch (e) {
      console.log("no retainors found");
    }
  };

  wallet.subscribe((value: string) => {
    if (value !== "") {
      retainer.options.publicKey = value;
      retainer.options.signTransaction = signTransaction;
      setRetainors(value).then(() => {
        console.log("setRetainors");
      });
      setRetainees(value).then(() => {
        console.log("setRetainees");
      });
    } else {
      retainees.set([]);
      retainors.set([]);
    }
  });
</script>
